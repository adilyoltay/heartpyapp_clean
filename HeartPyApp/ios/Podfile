# Resolve react_native_pods.rb with node to allow for hoisting
require 'fileutils'
require 'xcodeproj'
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, '15.4'
install! 'cocoapods', :deterministic_uuids => false

target 'HeartPyApp' do
  # Load React Native configuration
  config = use_native_modules!

  # Keep manual pod declarations until upstreams ship stable new-arch specs.
  # VisionCamera and Reanimated both still require explicit pod entries to:
  # - ensure frame processor + layout animations load before TurboModules land
  # - avoid CocoaPods plugins from toggling new-arch flags prematurely
  pod 'HeartPy', :path => '../../react-native-heartpy/ios'
  pod 'VisionCamera', :path => '../node_modules/react-native-vision-camera'
  pod 'RNReanimated', :path => '../node_modules/react-native-reanimated'


  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :hermes_enabled => true,
    :new_arch_enabled => true,
    :fabric_enabled => true
  )

  target 'HeartPyAppTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )

    folly_dir = installer.sandbox.pod_dir('RCT-Folly')
    if folly_dir
      folly_config = File.join(folly_dir, 'folly', 'folly-config.h')
      unless File.exist?(folly_config)
        FileUtils.mkdir_p(File.dirname(folly_config))
        File.write(folly_config, <<~FOLLYCFG)
          #pragma once

          #define FOLLY_MOBILE 1
          #define FOLLY_USE_LIBCPP 1
          #define FOLLY_HAVE_PTHREAD 1
          #define FOLLY_CFG_NO_COROUTINES 1
          #define FOLLY_HAVE_CLOCK_GETTIME 1

          #pragma clang diagnostic ignored "-Wcomma"
        FOLLYCFG
      end
      
      # Create missing Coroutine.h for Folly with complete stubs
      coro_dir = File.join(folly_dir, 'folly', 'coro')
      unless File.exist?(coro_dir)
        FileUtils.mkdir_p(coro_dir)
      end
      
      coroutine_h = File.join(coro_dir, 'Coroutine.h')
      File.write(coroutine_h, <<~COROH)
        #pragma once
        // Stub for Coroutine.h - coroutines are disabled for mobile builds
        #include <folly/ExceptionWrapper.h>
        
        namespace folly {
        namespace coro {
          // Stub types for coroutine support
          template<typename T = void>
          struct coroutine_handle {
            void* ptr = nullptr;
            static coroutine_handle from_address(void* addr) noexcept {
              coroutine_handle h;
              h.ptr = addr;
              return h;
            }
            void* address() const noexcept { return ptr; }
            void resume() const {}
            void destroy() const {}
            bool done() const { return false; }
            explicit operator bool() const noexcept { return ptr != nullptr; }
          };
          
          struct suspend_never {
            bool await_ready() const noexcept { return true; }
            void await_suspend(coroutine_handle<>) const noexcept {}
            void await_resume() const noexcept {}
          };
          
          struct suspend_always {
            bool await_ready() const noexcept { return false; }
            void await_suspend(coroutine_handle<>) const noexcept {}
            void await_resume() const noexcept {}
          };
          
          template<typename T = void>
          struct promise {
            using value_type = T;
          };

          template<typename Promise>
          struct get_return_object {
            using type = typename Promise::value_type;
          };

          template<typename T = void>
          struct Generator {
            using promise_type = promise<T>;
          };

          template<typename T>
          class Task {
          public:
            T value;
          };

          inline constexpr bool detect_promise_return_object_eager_conversion() noexcept {
            return false;
          }
        }
        }
      COROH
    end

    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.4'
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
      end
    end

    installer.aggregate_targets.each do |aggregate_target|
      aggregate_target.user_project.native_targets.each do |native_target|
        native_target.build_configurations.each do |config|
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.4'
          config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
          config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        end
      end
    end

    # Ensure Yoga headers are visible to React* targets that include <yoga/...>
    yoga_consumers = [
      'React-Fabric', 'React-RCTFabric', 'React-Core', 'React-Codegen',
      'React-graphics', 'React-rendererdebug', 'React-renderertext',
      'React-renderercomponents', 'React-utils'
    ]
    installer.pods_project.targets.each do |t|
      next unless yoga_consumers.include?(t.name)
      t.build_configurations.each do |config|
        config.build_settings['HEADER_SEARCH_PATHS'] ||= ['$(inherited)']
        config.build_settings['HEADER_SEARCH_PATHS'] << "$(PODS_ROOT)/Headers/Private/Yoga"
        config.build_settings['HEADER_SEARCH_PATHS'] << "$(PODS_ROOT)/Headers/Public/Yoga"
      end
    end
  end
end
