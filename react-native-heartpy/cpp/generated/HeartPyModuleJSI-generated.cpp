/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "HeartPyModuleJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyze(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyze(
    rt,
    args[0].asObject(rt).asArray(rt),
    args[1].asNumber(),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyzeSegmentwise(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyzeSegmentwise(
    rt,
    args[0].asObject(rt).asArray(rt),
    args[1].asNumber(),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyzeRR(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyzeRR(
    rt,
    args[0].asObject(rt).asArray(rt),
    count <= 1 || args[1].isNull() || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyzeAsync(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyzeAsync(
    rt,
    args[0].asObject(rt).asArray(rt),
    args[1].asNumber(),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyzeSegmentwiseAsync(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyzeSegmentwiseAsync(
    rt,
    args[0].asObject(rt).asArray(rt),
    args[1].asNumber(),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyzeRRAsync(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyzeRRAsync(
    rt,
    args[0].asObject(rt).asArray(rt),
    count <= 1 || args[1].isNull() || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyzeTyped(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyzeTyped(
    rt,
    args[0].asObject(rt).asArray(rt),
    args[1].asNumber(),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyzeSegmentwiseTyped(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyzeSegmentwiseTyped(
    rt,
    args[0].asObject(rt).asArray(rt),
    args[1].asNumber(),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyzeRRTyped(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyzeRRTyped(
    rt,
    args[0].asObject(rt).asArray(rt),
    count <= 1 || args[1].isNull() || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyzeAsyncTyped(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyzeAsyncTyped(
    rt,
    args[0].asObject(rt).asArray(rt),
    args[1].asNumber(),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyzeSegmentwiseAsyncTyped(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyzeSegmentwiseAsyncTyped(
    rt,
    args[0].asObject(rt).asArray(rt),
    args[1].asNumber(),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_analyzeRRAsyncTyped(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->analyzeRRAsyncTyped(
    rt,
    args[0].asObject(rt).asArray(rt),
    count <= 1 || args[1].isNull() || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_interpolateClipping(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->interpolateClipping(
    rt,
    args[0].asObject(rt).asArray(rt),
    args[1].asNumber(),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asNumber())
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_hampelFilter(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->hampelFilter(
    rt,
    args[0].asObject(rt).asArray(rt),
    count <= 1 || args[1].isNull() || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asNumber()),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asNumber())
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_scaleData(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->scaleData(
    rt,
    args[0].asObject(rt).asArray(rt),
    count <= 1 || args[1].isNull() || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asNumber()),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asNumber())
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_installJSI(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->installJSI(
    rt
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_getConfig(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->getConfig(
    rt
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_setConfig(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->setConfig(
    rt,
    args[0].asObject(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_rtCreate(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->rtCreate(
    rt,
    args[0].asNumber(),
    count <= 1 || args[1].isNull() || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asObject(rt))
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_rtPush(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->rtPush(
    rt,
    args[0].asNumber(),
    args[1].asObject(rt).asArray(rt),
    count <= 2 || args[2].isNull() || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asNumber())
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_rtPushTs(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->rtPushTs(
    rt,
    args[0].asNumber(),
    args[1].asObject(rt).asArray(rt),
    args[2].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_rtPoll(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->rtPoll(
    rt,
    args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_rtSetWindow(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->rtSetWindow(
    rt,
    args[0].asNumber(),
    args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_rtDestroy(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->rtDestroy(
    rt,
    args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_addListener(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->addListener(
    rt,
    args[0].asString(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeHeartPyCxxSpecJSI_removeListeners(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeHeartPyCxxSpecJSI *>(&turboModule)->removeListeners(
    rt,
    args[0].asNumber()
  );
  return jsi::Value::undefined();
}

NativeHeartPyCxxSpecJSI::NativeHeartPyCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("HeartPyModule", jsInvoker) {
  methodMap_["analyze"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_analyze};
  methodMap_["analyzeSegmentwise"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_analyzeSegmentwise};
  methodMap_["analyzeRR"] = MethodMetadata {2, __hostFunction_NativeHeartPyCxxSpecJSI_analyzeRR};
  methodMap_["analyzeAsync"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_analyzeAsync};
  methodMap_["analyzeSegmentwiseAsync"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_analyzeSegmentwiseAsync};
  methodMap_["analyzeRRAsync"] = MethodMetadata {2, __hostFunction_NativeHeartPyCxxSpecJSI_analyzeRRAsync};
  methodMap_["analyzeTyped"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_analyzeTyped};
  methodMap_["analyzeSegmentwiseTyped"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_analyzeSegmentwiseTyped};
  methodMap_["analyzeRRTyped"] = MethodMetadata {2, __hostFunction_NativeHeartPyCxxSpecJSI_analyzeRRTyped};
  methodMap_["analyzeAsyncTyped"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_analyzeAsyncTyped};
  methodMap_["analyzeSegmentwiseAsyncTyped"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_analyzeSegmentwiseAsyncTyped};
  methodMap_["analyzeRRAsyncTyped"] = MethodMetadata {2, __hostFunction_NativeHeartPyCxxSpecJSI_analyzeRRAsyncTyped};
  methodMap_["interpolateClipping"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_interpolateClipping};
  methodMap_["hampelFilter"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_hampelFilter};
  methodMap_["scaleData"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_scaleData};
  methodMap_["installJSI"] = MethodMetadata {0, __hostFunction_NativeHeartPyCxxSpecJSI_installJSI};
  methodMap_["getConfig"] = MethodMetadata {0, __hostFunction_NativeHeartPyCxxSpecJSI_getConfig};
  methodMap_["setConfig"] = MethodMetadata {1, __hostFunction_NativeHeartPyCxxSpecJSI_setConfig};
  methodMap_["rtCreate"] = MethodMetadata {2, __hostFunction_NativeHeartPyCxxSpecJSI_rtCreate};
  methodMap_["rtPush"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_rtPush};
  methodMap_["rtPushTs"] = MethodMetadata {3, __hostFunction_NativeHeartPyCxxSpecJSI_rtPushTs};
  methodMap_["rtPoll"] = MethodMetadata {1, __hostFunction_NativeHeartPyCxxSpecJSI_rtPoll};
  methodMap_["rtSetWindow"] = MethodMetadata {2, __hostFunction_NativeHeartPyCxxSpecJSI_rtSetWindow};
  methodMap_["rtDestroy"] = MethodMetadata {1, __hostFunction_NativeHeartPyCxxSpecJSI_rtDestroy};
  methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeHeartPyCxxSpecJSI_addListener};
  methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeHeartPyCxxSpecJSI_removeListeners};
}


} // namespace facebook::react
