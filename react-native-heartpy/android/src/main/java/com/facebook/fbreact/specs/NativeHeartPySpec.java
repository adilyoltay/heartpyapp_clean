
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJavaSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public abstract class NativeHeartPySpec extends ReactContextBaseJavaModule implements TurboModule {
  public static final String NAME = "HeartPyModule";

  public NativeHeartPySpec(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  public @Nonnull String getName() {
    return NAME;
  }

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableMap analyze(ReadableArray signal, double fs, @Nullable ReadableMap options);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableMap analyzeSegmentwise(ReadableArray signal, double fs, @Nullable ReadableMap options);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableMap analyzeRR(ReadableArray rrIntervals, @Nullable ReadableMap options);

  @ReactMethod
  @DoNotStrip
  public abstract void analyzeAsync(ReadableArray signal, double fs, @Nullable ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void analyzeSegmentwiseAsync(ReadableArray signal, double fs, @Nullable ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void analyzeRRAsync(ReadableArray rrIntervals, @Nullable ReadableMap options, Promise promise);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableMap analyzeTyped(ReadableArray signal, double fs, @Nullable ReadableMap options);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableMap analyzeSegmentwiseTyped(ReadableArray signal, double fs, @Nullable ReadableMap options);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableMap analyzeRRTyped(ReadableArray rrIntervals, @Nullable ReadableMap options);

  @ReactMethod
  @DoNotStrip
  public abstract void analyzeAsyncTyped(ReadableArray signal, double fs, @Nullable ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void analyzeSegmentwiseAsyncTyped(ReadableArray signal, double fs, @Nullable ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void analyzeRRAsyncTyped(ReadableArray rrIntervals, @Nullable ReadableMap options, Promise promise);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableArray interpolateClipping(ReadableArray signal, double fs, @Nullable Double threshold);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableArray hampelFilter(ReadableArray signal, @Nullable Double windowSize, @Nullable Double threshold);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableArray scaleData(ReadableArray signal, @Nullable Double newMin, @Nullable Double newMax);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract boolean installJSI();

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableMap getConfig();

  @ReactMethod
  @DoNotStrip
  public abstract void setConfig(ReadableMap config);

  @ReactMethod
  @DoNotStrip
  public abstract void rtCreate(double fs, @Nullable ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void rtPush(double handle, ReadableArray samples, @Nullable Double t0, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void rtPushTs(double handle, ReadableArray samples, ReadableArray timestamps, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void rtPoll(double handle, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void rtSetWindow(double handle, double windowSeconds, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void rtDestroy(double handle, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addListener(String eventType);

  @ReactMethod
  @DoNotStrip
  public abstract void removeListeners(double count);
}
